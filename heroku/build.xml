<?xml version="1.0"?>

<project name="snova-heroku" default="release">
	<property name="root" value="." />
	<property name="srcroot" value="${root}/src/main/java" />
	<property name="releasedir" value="${root}/release" />
	<property name="clientclasses" value="${root}/build" />
	<property name="clientjar" value="heroku-client.jar" />
	<property name="distroot" value="${root}/lib" />
	<property name="docdir" value="${root}/doc" />
	<property name="lib" value="${root}/lib" />
	<property name="repo" value="${root}/repo/snova" />
	<property name="conf" value="${root}/conf" />
	<property name="temp" value="${root}/temp" />
	<property name="release" value="release" />
	<property name="version" value="0.12.0101" />
	<property name="versionfile" value="org/snova/heroku/common/HerokuPluginVersion.java" />
	<property name="release_dir_name" value="heroku" />
	<property name="project_name" value="snova-heroku" />

	<tstamp />
	<target name="prepare">
		<mkdir dir="${clientclasses}" />
		<mkdir dir="${distroot}" />
		<copy tofile="${repo}/arch/1.0/arch-1.0.jar" file="${root}/../framework/lib/arch.jar" />
		<copy tofile="${repo}/framework/1.0/framework-1.0.jar" file="${root}/../framework/lib/framework.jar" />
		<echo message="package org.snova.heroku.common;
			public class HerokuPluginVersion
			{
			   public static final String value = &quot;${version}&quot;;
			}" file="${srcroot}/${versionfile}" />
	</target>

	<target name="compile-client" depends="prepare">
		<javac debug="on" destdir="${clientclasses}">
			<src path="${srcroot}" />
			<exclude name="org/snova/heroku/server/**/*" />
			<classpath>
				<fileset dir="${lib}">
					<include name="*.jar" />
				</fileset>
				<pathelement path="${root}/../framework/lib/framework.jar" />
				<pathelement path="${root}/../framework/lib/netty-3.1.5.GA.jar" />
				<pathelement path="${root}/../framework/lib/arch.jar" />
				<pathelement path="${root}/../framework/lib/slf4j-api-1.6.4.jar" />
			</classpath>
		</javac>
		<copy todir="${clientclasses}">
			<fileset dir="${srcroot}">
				<include name="**/*.png" />
				<include name="**/*.txt" />
			</fileset>
		</copy>
	</target>

	<target name="compile" depends="compile-client" />

	<target name="jarclient" depends="compile">
		<jar destfile="${distroot}/${clientjar}" basedir="${clientclasses}">
		</jar>
		<delete dir="${clientclasses}" />
	</target>

	<target name="packageserver">
		<property name="releaseserverdir" value="${releasedir}/${project_name}-server-${version}" />
		<copy tofile="repo/snova/framework/1.0/framework-1.0.jar" file="${root}/../framework/lib/framework.jar"/>
		<copy tofile="repo/snova/arch/1.0/arch-1.0.jar" file="${root}/../framework/lib/arch.jar"/>
		<copy todir="${releaseserverdir}/">
			<fileset dir="${root}">
				<include name="**/pom.xml" />
				<include name="**/Procfile" />
				<include name="**/.gitignore" />
				<include name="**/changelog.txt" />
				<include name="**/licence.txt" />
				<include name="**/readme.txt" />
				<include name="**/repo/**" />
				<include name="**/target/**" />
				<include name="**/org/snova/heroku/server/**" />
				<include name="**/org/snova/heroku/common/**" />
				<exclude name="**/bin/**" />
			</fileset>
		</copy>

		<zip destfile="${project_name}-jserver-${version}.zip" basedir="${releasedir}" includes="${project_name}-server-${version}/**" />
		<delete dir="${releasedir}" />
	</target>

	<target name="release" depends="jarclient, packageserver">
		<property name="releaseprojectdir" value="${releasedir}/${release_dir_name}" />
		<mkdir dir="${releaseprojectdir}" />
		<copy todir="${releaseprojectdir}/lib">
			<fileset dir="${lib}">
				<include name="commons-cli-1.2.jar" />
				<include name="smack.jar" />
				<include name="${clientjar}" />
			</fileset>

		</copy>
		<copy todir="${releaseprojectdir}/conf">
			<fileset dir="${conf}" />
		</copy>
		<!--
		<copy todir="${releaseprojectdir}/bin">
			<fileset dir="${shell}" />
		</copy>
		-->
		<copy todir="${releaseprojectdir}" file="${root}/plugin.xml" />
		<copy todir="${releaseprojectdir}" file="${root}/readme.txt" />
		<copy todir="${releaseprojectdir}" file="${root}/changelog.txt" />
		<copy todir="${releaseprojectdir}" file="${root}/licence.txt" />
		<zip destfile="${root}/${project_name}-${version}.zip" basedir="${releasedir}" />
		<delete dir="${releasedir}" />
	</target>

</project>
