/**
 * 
 */
package org.snova.framework.proxy.spac.filter;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;

import org.arch.config.IniProperties;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.snova.framework.config.SnovaConfiguration;
import org.snova.framework.util.FileManager;

/**
 * @author qiyingwang
 * 
 */
public class GFWList extends SpacFilter {
	protected static Logger logger = LoggerFactory.getLogger(GFWList.class);
	private static GFWList instance = new GFWList();

	private GFWList() {
	}

	static GFWList getInstacne() {
		return instance;
	}

	@Override
	public boolean filter(HttpRequest req) {
		return false;
	}
	
	public static void loadRules(String rules)
	{
		
	}

	public static void generatePAC(String url, String content) throws IOException {
		String template = "/*\r\n"
				+ "* Proxy Auto-Config file generated by autoproxy2pac\r\n"
				+ "*  Rule source: {{.RuleListUrl}}\r\n"
				+ "*  Last update: {{.RuleListDate}}\r\n" + "*/\r\n"
				+ "function FindProxyForURL(url, host) {\r\n"
				+ "   var {{.ProxyVar}} = \"{{.ProxyString}}\";\r\n"
				+ "   var {{.DefaultVar}} = \"{{.DefaultString}}\";\r\n"
				+ "   {{.CustomCodePre}}\r\n" + "   {{.RulesBegin}}\r\n"
				+ "   {{.RuleListCode}}\r\n" + "   {{.RulesEnd}}\r\n"
				+ "   {{.CustomCodePost}}\r\n"
				+ "   return {{.DefaultVar}};\r\n" + "}";

		IniProperties cfg = SnovaConfiguration.getInstance().getIniProperties();

		String rulesBegin = "//-- AUTO-GENERATED RULES, DO NOT MODIFY!";
		String rulesEnd = "//-- END OF AUTO-GENERATED RULES";
		String proxyVar = "PROXY";
		String ruleListUrl = url;
		String ruleListDate = "";
		String proxyString = "PROXY " + cfg.getProperty("SPAC", "PACProxy");
		String defaultVar = "DEFAULT";
		String defaultString = "DIRECT";

		StringBuilder jsCode = new StringBuilder();
		
		FileManager.writeFile(template, "spac/snova-gfwlist.txt");
		BufferedReader reader = new BufferedReader(new StringReader(content));
		int i = 0;
		while (true) {
			String line = reader.readLine();
			i++;
			if (i == 1) {
				continue;
			}
			if (null == line) {
				break;
			}
			line = line.trim();
			// comment
			if (line.length() == 0 || line.startsWith("!")) {
				continue;
			}
			String proxy_var = "PROXY";
			if (line.startsWith("@@")) {
				line = line.substring(2);
				proxy_var = "DEFAULT";
			}
			String jsRegexp = "";
			if (line.startsWith("/") && line.endsWith("/")) {
				jsRegexp = line.substring(1, line.length() - 1);
			} else {
				jsRegexp = line.replaceAll("\\*+", "*");
				jsRegexp = jsRegexp.replaceFirst("\\^\\|$", "^");
				jsRegexp = jsRegexp.replaceAll("(\\W)", "\\$0");
				jsRegexp = jsRegexp.replaceAll("\\*", ".*");
				jsRegexp = jsRegexp.replaceAll("\\\\^",
						"(?:[^\\w\\-.%\u0080-\uFFFF]|$)");
				jsRegexp = jsRegexp.replaceFirst("^\\\\\\|\\\\\\|",
						"^[\\w\\-]+:\\/+(?!\\/)(?:[^\\/]+\\.)?");
				jsRegexp = jsRegexp.replaceFirst("^\\\\\\|", "^");
				jsRegexp = jsRegexp.replaceFirst("\\\\\\|$", "$");
				jsRegexp = jsRegexp.replaceFirst("^(\\.\\*)", "");
				jsRegexp = jsRegexp.replaceFirst("(\\.\\*)$", "");
			}
			if (jsRegexp.length() == 0) {
				logger.error("There is one rule that matches all URL, which is highly *NOT* recommended: "
						+ line);
			}
			String jsLine = String.format("if(/%s/i.test(url)) return %s;", jsRegexp, proxy_var);
			if(proxy_var.equals("DEFAULT"))
			{
				StringBuilder tmp = new StringBuilder();
				tmp.append(jsLine).append("\r\n\t");
				tmp.append(jsCode);
				jsCode = tmp;
			}else{
				jsCode.append(jsLine).append("\r\n\t");
			}
		}
		template = template.replaceAll("{{.RulesBegin}}", rulesBegin);
		template = template.replaceAll("{{.RulesEnd}}", rulesEnd);
		template = template.replaceAll("{{.RuleListUrl}}", ruleListUrl);
		template = template.replaceAll("{{.RuleListDate}}", ruleListDate);
		template = template.replaceAll("{{.ProxyVar}}", proxyVar);
		template = template.replaceAll("{{.ProxyString}}", proxyString);
		template = template.replaceAll("{{.DefaultVar}}", defaultVar);
		template = template.replaceAll("{{.DefaultString}}", defaultString);
		template = template.replaceAll("{{.CustomCodePre}}", "");
		template = template.replaceAll("{{.RuleListCode}}", jsCode.toString());
		template = template.replaceAll("{{.CustomCodePost}}", "");
		FileManager.writeFile(template, "spac/snova-gfwlist.pac");
	}
}
